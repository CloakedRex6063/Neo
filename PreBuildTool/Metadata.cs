using System.Text;

namespace PreBuildTool;

public class Metadata
{
    public Metadata(List<StructInfo> structs)
    {
        _structs = structs;
    }

    public string Generate()
    {
        var sb = new StringBuilder();
        sb.AppendLine("#pragma once");
        sb.AppendLine("// This file was generated by PreBuildTool");
        sb.AppendLine("// Do not modify.");

        sb.AppendLine("namespace Neo");
        sb.AppendLine("{");
        foreach (var s in _structs)
        {
            sb.AppendLine();
            sb.AppendLine($"inline void Register{s.Name}()");
            sb.AppendLine("{");
            sb.AppendLine("    using namespace entt::literals;");
            sb.AppendLine($"    entt::meta_factory<{s.Name}>{{}}");
            for (var i = 0; i < s.SerializedFields.Count; i++)
            {
                var field = s.SerializedFields[i];
                var sep = i == s.SerializedFields.Count - 1 ? ";" : "";
                sb.AppendLine($"        .data<&{s.Name}::{field}>(\"{field}\"_hs)");
                sb.AppendLine($"        .custom<std::string>(\"{field}\"){sep}");
            }
            sb.AppendLine("}");
            sb.AppendLine();
        }
        
        sb.AppendLine();
        sb.AppendLine("inline void RegisterMeta() {");
        foreach (var s in _structs)
        {
            sb.AppendLine($"    Register{s.Name}();");
        }
        sb.AppendLine("}");
        sb.AppendLine("}");

        return sb.ToString();
    }
    
    private readonly List<StructInfo> _structs;
}